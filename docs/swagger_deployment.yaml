openapi: 3.0.1
info:
  version: '1.0'
  title: 'Dnd 3.5 edition API on Scritch Ninja'
  description: ''
#servers:
#  # Added by API Auto Mocking Plugin
#  - description: SwaggerHub API Auto Mocking
#    url: https://virtserver.swaggerhub.com/CREWDEREK/Dnd3rdScritchNinja/0.1
paths:
  /user/characters:
    get:
      summary: Returns the characters for a user
      description: Returns the characters for a user
      security: # This is where you apply the authorizer to the API endpoint
        - jwt-authorizer: [ ] # This is the name of the authorizer defined below
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/integration1'
      responses:
        '200':
          description: Characters retrieved.
        '403':
          description: The logged in user could not be found.
        '404':
          description: No characters could not be found.
        '500':
          description: Internal server error with getting the character.
  /character:
    get:
      summary: Returns a character and their top level stats
      description: Returns items such as name, level, experience and not listed items such as skills, feats, attacks, armor, inventory, etc...
      responses:
        '200':
          description: Character retrieved.
        '400':
          description: An internal validation error has occurred.
        '403':
          description: The logged in user could not be found.
        '404':
          description: The character could not be found.
        '500':
          description: Internal server error with getting the character.
      parameters:
        #        - $ref: "#/components/parameters/cognitoUserIdParam"
        - $ref: "#/components/parameters/characterIdParam"
    post:
      summary: Creates a character with their default stats.
      description: Creates an empty character sheet.
      responses:
        '201':
          description: Character created.
        '400':
          description: An internal validation error has occurred.
        '409':
          description: The character already exists and could not be created.
        '500':
          description: Internal server error with creating the character.
    #      requestBody:
    #        required: true
    #        content:
    #          application/json:
    #            schema:
    #              $ref: '#/components/schemas/Character'
    patch:
      summary: Updates a single character stat
      description: Updates a single character stat at a time.
      responses:
        '201':
          description: Stat updated.
        '400':
          description: TODO.
        '409':
          description: TODO.
        '500':
          description: TODO.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCharacter'
  /character/abilities:
    get:
      summary: Gets the abilities associated with a character
      description: Gets all of the abilities and scores associated with a set characterId
      responses:
        '200':
          description: Ability retrieved.
        '400':
          description: An internal validation error has occurred.
        '404':
          description: The ability could not be found.
        '500':
          description: Internal server error with getting the ability.
      parameters:
        #        - $ref: "#/components/parameters/cognitoUserIdParam"
        - $ref: "#/components/parameters/characterIdParam"
    post:
      summary: Create abilities associated with a character
      description: Creates the abilities associated with a character
      responses:
        '201':
          description: Ability created.
        '400':
          description: An internal validation error has occurred.
        '409':
          description: The ability already exist and could not be created.
        '500':
          description: Internal server error with creating the ability.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ability'
  /character/skills:
    get:
      summary: Gets the skills associated with a character
      description: Gets all of the skills and scores associated with a set characterId
      responses:
        '200':
          description: Skills retrieved.
      parameters:
        #        - $ref: "#/components/parameters/cognitoUserIdParam"
        - $ref: "#/components/parameters/characterIdParam"
    post:
      summary: Create skills associated with a character
      description: Creates the skills associated with a character
      responses:
        '201':
          description: Skills created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
  /character/saving-throws:
    get:
      summary: Gets the saving throws associated with a character
      description: Gets all of the saving throws and scores associated with a set characterId
      responses:
        '200':
          description: Saving throws retrieved.
      parameters:
        #        - $ref: "#/components/parameters/cognitoUserIdParam"
        - $ref: "#/components/parameters/characterIdParam"
    post:
      summary: Create saving throws associated with a character
      description: Creates the saving throws associated with a character
      responses:
        '201':
          description: Saving throws created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
  /character/weapons:
    get:
      summary: Gets the weapons associated with a character
      description: Gets all of the weapons and scores associated with a set characterId
      security: # This is where you apply the authorizer to the API endpoint
        - jwt-authorizer: [ ] # This is the name of the authorizer defined below
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/integration1'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeaponWithIds'
        '403':
          description: The client isn't authorized to access this characters weapons.
        '404':
          description: The character could not be found.
      parameters:
        #        - $ref: "#/components/parameters/cognitoUserIdParam"
        - $ref: "#/components/parameters/characterIdParam"
    post:
      summary: Create weapons associated with a character
      description: Creates the weapons associated with a character
      responses:
        '201':
          description: Weapons created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeaponWithCharacterId'
  /character/armor:
    get:
      summary: Gets the weapons associated with a character
      description: Gets all of the weapons and scores associated with a set characterId
      responses:
        '200':
          description: Weapons retrieved.
      parameters:
        #        - $ref: "#/components/parameters/cognitoUserIdParam"
        - $ref: "#/components/parameters/characterIdParam"
    post:
      summary: Create weapons associated with a character
      description: Creates the weapons associated with a character
      responses:
        '201':
          description: Weapons created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Armor'
  /character/feats:
    get:
      summary: Gets the abilities associated with a character
      description: Gets all of the abilities and scores associated with a set characterId
      responses:
        '200':
          description: Abilities retrieved.
      parameters:
        #        - $ref: "#/components/parameters/cognitoUserIdParam"
        - $ref: "#/components/parameters/characterIdParam"
    post:
      summary: Create abilities associated with a character
      description: Creates the abilities associated with a character
      responses:
        '201':
          description: Ability created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ability'
components:
  parameters:
    cognitoUserIdParam:
      name: cognitoUserId
      in: path
      required: true
      description: The unique ID associated with the users Cognito account
      schema:
        type: string
    characterIdParam:
      name: characterId
      in: path
      required: true
      description: The unique ID associated with the character to get
      schema:
        type: string
  schemas:
    Currency:
      properties:
        copper:
          type: number
        silver:
          type: number
        gold:
          type: number
        platinum:
          type: number
    Spells:
      properties:
        characterId:
          type: string
        name:
          type: string
        description:
          type: string
        level:
          type: number
        components:
          type: array
          items:
            type: string
        castingTime:
          type: string
        range:
          type: number
        rangeIncrementPerLevel:
          type: number
        duration:
          type: number
        savingThrows:
          type: array
          items:
            type: string
        isSpellResistant:
          type: boolean
    SpecialAbilities:
      properties:
        characterId:
          type: string
        name:
          type: string
        description:
          type: string
    Feat:
      properties:
        characterId:
          type: string
        name:
          type: string
        description:
          type: string
    Item:
      properties:
        name:
          type: string
        isEquipped:
          type: boolean
        equipmentSlot:
          type: string
        weight:
          type: number
        size:
          type: string
        cost:
          type: number
          description: In copper coins
        count:
          type: number
        notes:
          type: string
      required:
        - name
    ItemWithId:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
      properties:
        itemId:
          type: string
    ItemWithCharacterId:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
      properties:
        characterId:
          type: string
      required:
        - characterId
    Armor:
      properties:
        characterId:
          type: string
        name:
          type: string
        armorClassBonus:
          type: number
        armorType:
          type: string
        maxDexterityModifier:
          type: number
        maxCharacterSpeed:
          type: number
        checkPenalty:
          type: number
        spellFailure:
          type: number
        isShield:
          type: boolean
        itemInfo:
          type: object
          $ref: '#/components/schemas/Item'
    Damage:
      properties:
        diceAmount:
          type: number
        diceSides:
          type: number
        addedDamage:
          type: number
        damageType:
          type: string
        canCritical:
          type: boolean
    Weapon:
      properties:
        weaponType:
          type: string
        damages:
          type: array
          items:
            $ref: '#/components/schemas/Damage'
        criticalMinRange:
          type: number
        criticalMultiplier:
          type: number
        range:
          type: number
        requiresAmmunition:
          type: boolean
        itemInfo:
          $ref: '#/components/schemas/Item'
    WeaponWithIds:
      allOf:
        - $ref: '#/components/schemas/Weapon'
        - type: object
      properties:
        weaponId:
          type: string
        itemInfo:
          $ref: '#/components/schemas/ItemWithId'
    WeaponWithCharacterId:
      allOf:
        - $ref: '#/components/schemas/Weapon'
        - type: object
      properties:
        itemInfo:
          $ref: '#/components/schemas/Item'
    SavingThrow:
      properties:
        characterId:
          type: string
        name:
          type: string
        score:
          type: number
        savingThrowType:
          type: string
    Skill:
      properties:
        characterId:
          type: string
        name:
          type: string
        score:
          type: number
        skillType:
          type: string
        isTrained:
          type: boolean
    Ability:
      properties:
        characterId:
          type: string
        name:
          type: string
        score:
          type: number
        abilityType:
          type: string
    Character:
      properties:
        cognitoUserId:
          type: string
        characterId:
          type: string
        characterName:
          type: string
        characterLevel:
          type: number
        characterExperience:
          type: number
        race:
          type: string
        alignment:
          type: string
        deity:
          type: string
        size:
          type: string
        age:
          type: number
        gender:
          type: string
        height:
          type: string
        weight:
          type: string
        characterDescription:
          type: string
        maxSkillRanks:
          type: number
        languages:
          type: array
          items:
            type: string
        classInfo:
          $ref: '#/components/schemas/Classes'
        currencyInfo:
          $ref: '#/components/schemas/Currency'
        baseAttackBonuses:
          type: array
          items:
            type: number
    Classes:
      type: array
      items:
        type: object
        properties:
          className:
            type: string
          level:
            type: number
    UpdateCharacter:
      type: object
      properties:
        characterId:
          type: string
        columnName:
          type: string
        columnValue:
          oneOf:
            - type: string
            - type: integer
      required:
        - characterId
        - columnName
        - columnValue
  x-amazon-apigateway-integrations:
    integration1:
      type: aws_proxy
      httpMethod: GET
      uri: $DND3RD_LAMBDA_ARN
      passthroughBehavior: when_no_templates
      payloadFormatVersion: 1.0
  securitySchemes:
    jwt-authorizer: # This is the custom name of the authorizer that you can reference in the security section above
      type: oauth2
      x-amazon-apigateway-authorizer:
        type: jwt
        identitySource: "$request.header.Authorization" # This indicates that the JWT token is passed in the Authorization header of the request
        jwtConfiguration:
          audience:
            - $COGNITO_AUDIENCE_1 # This is where you specify the client ID of your Cognito user pool app client
          issuer: $COGNITO_ISSUER # This is where you specify the issuer of your Cognito user pool JWT token
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
