openapi: 3.0.1
info:
  title: "dnd3rd.scritch.ninja"
  version: "2024-02-19T05:46:19Z"
servers:
  - url: "https://v288jal5qi.execute-api.us-west-2.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "api"
paths:
  /user/characters:
    get:
      summary: Returns the characters for a user
      description: Returns the characters for a user
      responses:
        '200':
          description: Characters retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        '403':
          description: The logged in user could not be found.
        '404':
          description: No characters could not be found.
        '500':
          description: Internal server error with getting the character.
      security:
        - authorizer.dnd3rd.scritch.ninja: [ ]
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/dnd3rdGetLambdaIntegration'
    options:
      responses:
        "200":
          $ref: '#/components/responses/DefaultOptions'
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/defaultIntegration'
  /character:
    get:
      summary: Returns a character and their top level stats
      description: Returns items such as name, level, experience and not listed items such as skills, feats, attacks, armor, inventory, etc...
      responses:
        '200':
          description: Character retrieved.
        '400':
          description: An internal validation error has occurred.
        '403':
          description: The logged in user could not be found.
        '404':
          description: The character could not be found.
        '500':
          description: Internal server error with getting the character.
      parameters:
        - $ref: "#/components/parameters/characterIdParam"
      security:
        - authorizer.dnd3rd.scritch.ninja: [ ]
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/dnd3rdGetLambdaIntegration'
#    post:
#      summary: Creates a character with their default stats.
#      description: Creates an empty character sheet.
#      responses:
#        '201':
#          description: Character created.
#        '400':
#          description: An internal validation error has occurred.
#        '409':
#          description: The character already exists and could not be created.
#        '500':
#          description: Internal server error with creating the character.
    #      requestBody:
    #        required: true
    #        content:
    #          application/json:
    #            schema:
    #              $ref: '#/components/schemas/Character'
#    patch:
#      summary: Updates a single character stat
#      description: Updates a single character stat at a time.
#      responses:
#        '201':
#          description: Stat updated.
#        '400':
#          description: TODO.
#        '409':
#          description: TODO.
#        '500':
#          description: TODO.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/UpdateCharacter'
  /character/abilities:
    get:
      summary: Gets the abilities associated with a character
      description: Gets all of the abilities and scores associated with a set characterId
      responses:
        '200':
          description: Ability retrieved.
        '400':
          description: An internal validation error has occurred.
        '404':
          description: The ability could not be found.
        '500':
          description: Internal server error with getting the ability.
      parameters:
        - $ref: "#/components/parameters/characterIdParam"
      security:
        - authorizer.dnd3rd.scritch.ninja: [ ]
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/dnd3rdGetLambdaIntegration'
#    post:
#      summary: Create abilities associated with a character
#      description: Creates the abilities associated with a character
#      responses:
#        '201':
#          description: Ability created.
#        '400':
#          description: An internal validation error has occurred.
#        '409':
#          description: The ability already exist and could not be created.
#        '500':
#          description: Internal server error with creating the ability.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Ability'
    options:
      responses:
        "200":
          $ref: '#/components/responses/DefaultOptions'
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/defaultIntegration'
  /character/skills:
    get:
      summary: Gets the skills associated with a character
      description: Gets all of the skills and scores associated with a set characterId
      responses:
        '200':
          description: Skills retrieved.
      parameters:
        - $ref: "#/components/parameters/characterIdParam"
      security:
        - authorizer.dnd3rd.scritch.ninja: [ ]
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/dnd3rdGetLambdaIntegration'
#    post:
#      summary: Create skills associated with a character
#      description: Creates the skills associated with a character
#      responses:
#        '201':
#          description: Skills created.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Skill'
  /character/saving-throws:
    get:
      summary: Gets the saving throws associated with a character
      description: Gets all of the saving throws and scores associated with a set characterId
      responses:
        '200':
          description: Saving throws retrieved.
      parameters:
        - $ref: "#/components/parameters/characterIdParam"
      security:
        - authorizer.dnd3rd.scritch.ninja: [ ]
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/dnd3rdGetLambdaIntegration'
#    post:
#      summary: Create saving throws associated with a character
#      description: Creates the saving throws associated with a character
#      responses:
#        '201':
#          description: Saving throws created.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Skill'
  /character/weapons:
    get:
      summary: Gets the weapons associated with a character
      description: Gets all of the weapons and scores associated with a set characterId
      responses:
        '200':
          description: Success.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeaponWithIds'
        '403':
          description: The client isn't authorized to access this characters weapons.
        '404':
          description: The character could not be found.
      parameters:
        - $ref: "#/components/parameters/characterIdParam"
      security:
        - authorizer.dnd3rd.scritch.ninja: [ ]
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/dnd3rdGetLambdaIntegration'
#    post:
#      summary: Create weapons associated with a character
#      description: Creates the weapons associated with a character
#      responses:
#        '201':
#          description: Weapons created.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/WeaponWithCharacterId'
    options:
      responses:
        "200":
          $ref: '#/components/responses/DefaultOptions'
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/defaultIntegration'
  /character/armor:
    get:
      summary: Gets the weapons associated with a character
      description: Gets all of the weapons and scores associated with a set characterId
      responses:
        '200':
          description: Weapons retrieved.
      parameters:
        - $ref: "#/components/parameters/characterIdParam"
      security:
        - authorizer.dnd3rd.scritch.ninja: [ ]
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/dnd3rdGetLambdaIntegration'
#    post:
#      summary: Create weapons associated with a character
#      description: Creates the weapons associated with a character
#      responses:
#        '201':
#          description: Weapons created.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Armor'
  /character/feats:
    get:
      summary: Gets the abilities associated with a character
      description: Gets all of the abilities and scores associated with a set characterId
      responses:
        '200':
          description: Abilities retrieved.
      parameters:
        - $ref: "#/components/parameters/characterIdParam"
      security:
        - authorizer.dnd3rd.scritch.ninja: [ ]
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/dnd3rdGetLambdaIntegration'
#    post:
#      summary: Create abilities associated with a character
#      description: Creates the abilities associated with a character
#      responses:
#        '201':
#          description: Ability created.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Ability'
components:
  x-amazon-apigateway-integrations:
    defaultIntegration:
      type: "mock"
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Authorization, *'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
      requestTemplates:
        application/json: '{"statusCode": 200}'
      passthroughBehavior: "when_no_match"
    dnd3rdGetLambdaIntegration:
      type: "AWS_PROXY"
      httpMethod: "POST"
      uri: $DND3RD_LAMBDA_ARN
      responses:
        default:
          statusCode: "200"
      passthroughBehavior: "when_no_match"
      contentHandling: "CONVERT_TO_TEXT"
  responses:
    DefaultOptions:
      description: "200 response"
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: "string"
        Access-Control-Allow-Methods:
          schema:
            type: "string"
        Access-Control-Allow-Credentials:
          schema:
            type: "string"
        Access-Control-Allow-Headers:
          schema:
            type: "string"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Empty"
  parameters:
    cognitoUserIdParam:
      name: cognitoUserId
      in: path
      required: true
      description: The unique ID associated with the users Cognito account
      schema:
        type: string
    characterIdParam:
      name: characterId
      in: path
      required: true
      description: The unique ID associated with the character to get
      schema:
        type: string
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
    Currency:
      properties:
        copper:
          type: number
        silver:
          type: number
        gold:
          type: number
        platinum:
          type: number
    Spells:
      properties:
        characterId:
          type: string
        name:
          type: string
        description:
          type: string
        level:
          type: number
        components:
          type: array
          items:
            type: string
        castingTime:
          type: string
        range:
          type: number
        rangeIncrementPerLevel:
          type: number
        duration:
          type: number
        savingThrows:
          type: array
          items:
            type: string
        isSpellResistant:
          type: boolean
    SpecialAbilities:
      properties:
        characterId:
          type: string
        name:
          type: string
        description:
          type: string
    Feat:
      properties:
        characterId:
          type: string
        name:
          type: string
        description:
          type: string
    Item:
      properties:
        name:
          type: string
        isEquipped:
          type: boolean
        equipmentSlot:
          type: string
        weight:
          type: number
        size:
          type: string
        cost:
          type: number
          description: In copper coins
        count:
          type: number
        notes:
          type: string
      required:
        - name
    ItemWithId:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
      properties:
        itemId:
          type: string
    ItemWithCharacterId:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
      properties:
        characterId:
          type: string
      required:
        - characterId
    Armor:
      properties:
        characterId:
          type: string
        name:
          type: string
        armorClassBonus:
          type: number
        armorType:
          type: string
        maxDexterityModifier:
          type: number
        maxCharacterSpeed:
          type: number
        checkPenalty:
          type: number
        spellFailure:
          type: number
        isShield:
          type: boolean
        itemInfo:
          type: object
          $ref: '#/components/schemas/Item'
    Damage:
      properties:
        diceAmount:
          type: number
        diceSides:
          type: number
        addedDamage:
          type: number
        damageType:
          type: string
        canCritical:
          type: boolean
    Weapon:
      properties:
        weaponType:
          type: string
        damages:
          type: array
          items:
            $ref: '#/components/schemas/Damage'
        criticalMinRange:
          type: number
        criticalMultiplier:
          type: number
        range:
          type: number
        requiresAmmunition:
          type: boolean
        itemInfo:
          $ref: '#/components/schemas/Item'
    WeaponWithIds:
      allOf:
        - $ref: '#/components/schemas/Weapon'
        - type: object
      properties:
        weaponId:
          type: string
        itemInfo:
          $ref: '#/components/schemas/ItemWithId'
    WeaponWithCharacterId:
      allOf:
        - $ref: '#/components/schemas/Weapon'
        - type: object
      properties:
        itemInfo:
          $ref: '#/components/schemas/Item'
    SavingThrow:
      properties:
        characterId:
          type: string
        name:
          type: string
        score:
          type: number
        savingThrowType:
          type: string
    Skill:
      properties:
        characterId:
          type: string
        name:
          type: string
        score:
          type: number
        skillType:
          type: string
        isTrained:
          type: boolean
    Ability:
      properties:
        characterId:
          type: string
        name:
          type: string
        score:
          type: number
        abilityType:
          type: string
    Character:
      properties:
        cognitoUserId:
          type: string
        characterId:
          type: string
        characterName:
          type: string
        characterLevel:
          type: number
        characterExperience:
          type: number
        race:
          type: string
        alignment:
          type: string
        deity:
          type: string
        size:
          type: string
        age:
          type: number
        gender:
          type: string
        height:
          type: string
        weight:
          type: string
        characterDescription:
          type: string
        maxSkillRanks:
          type: number
        languages:
          type: array
          items:
            type: string
        classInfo:
          $ref: '#/components/schemas/Classes'
        currencyInfo:
          $ref: '#/components/schemas/Currency'
        baseAttackBonuses:
          type: array
          items:
            type: number
    Classes:
      type: array
      items:
        type: object
        properties:
          className:
            type: string
          level:
            type: number
    UpdateCharacter:
      type: object
      properties:
        characterId:
          type: string
        columnName:
          type: string
        columnValue:
          oneOf:
            - type: string
            - type: integer
      required:
        - characterId
        - columnName
        - columnValue
  securitySchemes:
    authorizer.dnd3rd.scritch.ninja:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        type: "cognito_user_pools"
        providerARNs:
          - $COGNITO_ISSUER
x-amazon-apigateway-request-validators:
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true